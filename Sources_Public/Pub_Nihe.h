
//==================================================================================================
//| 文件名称 | Pub_Nihe.h
//|--------- |--------------------------------------------------------------------------------------
//| 文件描述 | Pub_Nihe.c所对应的头文件
//|--------- |--------------------------------------------------------------------------------------
//| 版权声明 | Copyright2007, 聚光科技(FPI)
//|----------|--------------------------------------------------------------------------------------
//|  版本    |  时间       |  作者     | 描述
//|--------- |-------------|-----------|------------------------------------------------------------
//|  V1.0    | 2007.04.10  | gao       | 初版
//==================================================================================================

#ifdef  NIHE_GLOBALS
#define NIHE_EXT
#else
#define NIHE_EXT extern
#endif

//=========================== Macro,Typestruct, & Class ===================//
#ifndef  PUB_NIHE_H
#define  PUB_NIHE_H  
//-------------------- Add your macro here --------------------//
//用户自己定义参数
#define N_MAX              4     //宏定义最大拟合阶次，根据实际需要进行等义，该值越小所需内存资源越少
#define NIHE1_EN           1     //0:不编译不包含拟合函数NiHe(), 以节省程序空间; 1:编译和包含拟合函数NiHe() 
#define NIHE2_EN           0     //0:不编译不包含拟合函数NiHe2(),以节省程序空间; 1:编译和包含拟合函数NiHe2()
#define DOUBLE_PRECISION   1     //0:单精度拟合精度(拟合运算中采用单精度数据类型float进行运算); 1:双精度拟合精度(拟合运算中采用单精度数据类型double进行运算)
//--------------------  Add your typestruct here --------------//
//--------------------  Add your class here -------------------//
#endif

//========================= Variable,Object & Fuction =====================//
//---------------------Add your variable he--------------------//
//-------------------- Add your object here -------------------//
//-------------------- Add your fuction here ------------------//
//曲线拟合函数
#if NIHE1_EN
NIHE_EXT void NiHe1(float *x, float *y, int n, float *a, int N);
#endif

//曲线拟合函数(加权)
#if NIHE2_EN
NIHE_EXT void  NiHe2(float *x, float *y, float *w, int n, float *a, int N);
#endif

//获取拟合函数f(x)在点x处的值
NIHE_EXT float s_fx(float *a, int N, float x);


